# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ArrayUDF')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ArrayUDF')
    _ArrayUDF = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ArrayUDF', [dirname(__file__)])
        except ImportError:
            import _ArrayUDF
            return _ArrayUDF
        if fp is not None:
            try:
                _mod = imp.load_module('_ArrayUDF', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ArrayUDF = swig_import_helper()
    del swig_import_helper
else:
    import _ArrayUDF
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArrayUDF.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _ArrayUDF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ArrayUDF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ArrayUDF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ArrayUDF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ArrayUDF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ArrayUDF.SwigPyIterator_copy(self)

    def next(self):
        return _ArrayUDF.SwigPyIterator_next(self)

    def __next__(self):
        return _ArrayUDF.SwigPyIterator___next__(self)

    def previous(self):
        return _ArrayUDF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ArrayUDF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ArrayUDF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ArrayUDF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ArrayUDF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ArrayUDF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ArrayUDF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ArrayUDF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ArrayUDF.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayUDF.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayUDF.IntVector___nonzero__(self)

    def __bool__(self):
        return _ArrayUDF.IntVector___bool__(self)

    def __len__(self):
        return _ArrayUDF.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayUDF.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayUDF.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayUDF.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayUDF.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayUDF.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayUDF.IntVector___setitem__(self, *args)

    def pop(self):
        return _ArrayUDF.IntVector_pop(self)

    def append(self, x):
        return _ArrayUDF.IntVector_append(self, x)

    def empty(self):
        return _ArrayUDF.IntVector_empty(self)

    def size(self):
        return _ArrayUDF.IntVector_size(self)

    def swap(self, v):
        return _ArrayUDF.IntVector_swap(self, v)

    def begin(self):
        return _ArrayUDF.IntVector_begin(self)

    def end(self):
        return _ArrayUDF.IntVector_end(self)

    def rbegin(self):
        return _ArrayUDF.IntVector_rbegin(self)

    def rend(self):
        return _ArrayUDF.IntVector_rend(self)

    def clear(self):
        return _ArrayUDF.IntVector_clear(self)

    def get_allocator(self):
        return _ArrayUDF.IntVector_get_allocator(self)

    def pop_back(self):
        return _ArrayUDF.IntVector_pop_back(self)

    def erase(self, *args):
        return _ArrayUDF.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _ArrayUDF.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ArrayUDF.IntVector_push_back(self, x)

    def front(self):
        return _ArrayUDF.IntVector_front(self)

    def back(self):
        return _ArrayUDF.IntVector_back(self)

    def assign(self, n, x):
        return _ArrayUDF.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayUDF.IntVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayUDF.IntVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayUDF.IntVector_reserve(self, n)

    def capacity(self):
        return _ArrayUDF.IntVector_capacity(self)
    __swig_destroy__ = _ArrayUDF.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _ArrayUDF.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayUDF.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayUDF.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ArrayUDF.DoubleVector___bool__(self)

    def __len__(self):
        return _ArrayUDF.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayUDF.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayUDF.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayUDF.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayUDF.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayUDF.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayUDF.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ArrayUDF.DoubleVector_pop(self)

    def append(self, x):
        return _ArrayUDF.DoubleVector_append(self, x)

    def empty(self):
        return _ArrayUDF.DoubleVector_empty(self)

    def size(self):
        return _ArrayUDF.DoubleVector_size(self)

    def swap(self, v):
        return _ArrayUDF.DoubleVector_swap(self, v)

    def begin(self):
        return _ArrayUDF.DoubleVector_begin(self)

    def end(self):
        return _ArrayUDF.DoubleVector_end(self)

    def rbegin(self):
        return _ArrayUDF.DoubleVector_rbegin(self)

    def rend(self):
        return _ArrayUDF.DoubleVector_rend(self)

    def clear(self):
        return _ArrayUDF.DoubleVector_clear(self)

    def get_allocator(self):
        return _ArrayUDF.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ArrayUDF.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ArrayUDF.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _ArrayUDF.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ArrayUDF.DoubleVector_push_back(self, x)

    def front(self):
        return _ArrayUDF.DoubleVector_front(self)

    def back(self):
        return _ArrayUDF.DoubleVector_back(self)

    def assign(self, n, x):
        return _ArrayUDF.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayUDF.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayUDF.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayUDF.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ArrayUDF.DoubleVector_capacity(self)
    __swig_destroy__ = _ArrayUDF.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _ArrayUDF.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayUDF.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayUDF.FloatVector___nonzero__(self)

    def __bool__(self):
        return _ArrayUDF.FloatVector___bool__(self)

    def __len__(self):
        return _ArrayUDF.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayUDF.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayUDF.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayUDF.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayUDF.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayUDF.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayUDF.FloatVector___setitem__(self, *args)

    def pop(self):
        return _ArrayUDF.FloatVector_pop(self)

    def append(self, x):
        return _ArrayUDF.FloatVector_append(self, x)

    def empty(self):
        return _ArrayUDF.FloatVector_empty(self)

    def size(self):
        return _ArrayUDF.FloatVector_size(self)

    def swap(self, v):
        return _ArrayUDF.FloatVector_swap(self, v)

    def begin(self):
        return _ArrayUDF.FloatVector_begin(self)

    def end(self):
        return _ArrayUDF.FloatVector_end(self)

    def rbegin(self):
        return _ArrayUDF.FloatVector_rbegin(self)

    def rend(self):
        return _ArrayUDF.FloatVector_rend(self)

    def clear(self):
        return _ArrayUDF.FloatVector_clear(self)

    def get_allocator(self):
        return _ArrayUDF.FloatVector_get_allocator(self)

    def pop_back(self):
        return _ArrayUDF.FloatVector_pop_back(self)

    def erase(self, *args):
        return _ArrayUDF.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _ArrayUDF.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ArrayUDF.FloatVector_push_back(self, x)

    def front(self):
        return _ArrayUDF.FloatVector_front(self)

    def back(self):
        return _ArrayUDF.FloatVector_back(self)

    def assign(self, n, x):
        return _ArrayUDF.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayUDF.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayUDF.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayUDF.FloatVector_reserve(self, n)

    def capacity(self):
        return _ArrayUDF.FloatVector_capacity(self)
    __swig_destroy__ = _ArrayUDF.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _ArrayUDF.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _ArrayUDF.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _ArrayUDF.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _ArrayUDF.intArray___setitem__(self, index, value)

    def cast(self):
        return _ArrayUDF.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_ArrayUDF.intArray_frompointer)
    else:
        frompointer = _ArrayUDF.intArray_frompointer
intArray_swigregister = _ArrayUDF.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _ArrayUDF.intArray_frompointer(t)
intArray_frompointer = _ArrayUDF.intArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _ArrayUDF.new_floatArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_floatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _ArrayUDF.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _ArrayUDF.floatArray___setitem__(self, index, value)

    def cast(self):
        return _ArrayUDF.floatArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_ArrayUDF.floatArray_frompointer)
    else:
        frompointer = _ArrayUDF.floatArray_frompointer
floatArray_swigregister = _ArrayUDF.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(t):
    return _ArrayUDF.floatArray_frompointer(t)
floatArray_frompointer = _ArrayUDF.floatArray_frompointer


def new_intp():
    return _ArrayUDF.new_intp()
new_intp = _ArrayUDF.new_intp

def copy_intp(value):
    return _ArrayUDF.copy_intp(value)
copy_intp = _ArrayUDF.copy_intp

def delete_intp(obj):
    return _ArrayUDF.delete_intp(obj)
delete_intp = _ArrayUDF.delete_intp

def intp_assign(obj, value):
    return _ArrayUDF.intp_assign(obj, value)
intp_assign = _ArrayUDF.intp_assign

def intp_value(obj):
    return _ArrayUDF.intp_value(obj)
intp_value = _ArrayUDF.intp_value

def new_floatp():
    return _ArrayUDF.new_floatp()
new_floatp = _ArrayUDF.new_floatp

def copy_floatp(value):
    return _ArrayUDF.copy_floatp(value)
copy_floatp = _ArrayUDF.copy_floatp

def delete_floatp(obj):
    return _ArrayUDF.delete_floatp(obj)
delete_floatp = _ArrayUDF.delete_floatp

def floatp_assign(obj, value):
    return _ArrayUDF.floatp_assign(obj, value)
floatp_assign = _ArrayUDF.floatp_assign

def floatp_value(obj):
    return _ArrayUDF.floatp_value(obj)
floatp_value = _ArrayUDF.floatp_value
DELAY_TO_CREATE = _ArrayUDF.DELAY_TO_CREATE
SDS_UDF_COLLECTIVE_IO = _ArrayUDF.SDS_UDF_COLLECTIVE_IO

def RowMajorOrder(dsize, coordinate):
    return _ArrayUDF.RowMajorOrder(dsize, coordinate)
RowMajorOrder = _ArrayUDF.RowMajorOrder

def RowMajorOrderReverse(offset, dsize):
    return _ArrayUDF.RowMajorOrderReverse(offset, dsize)
RowMajorOrderReverse = _ArrayUDF.RowMajorOrderReverse
class Datai(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datai, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Datai, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Datai(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Datai
    __del__ = lambda self: None

    def GetDimSize(self):
        return _ArrayUDF.Datai_GetDimSize(self)

    def ReadData(self, start, end, data):
        return _ArrayUDF.Datai_ReadData(self, start, end, data)

    def WriteData(self, start, end, data):
        return _ArrayUDF.Datai_WriteData(self, start, end, data)

    def DisableCollectivIO(self):
        return _ArrayUDF.Datai_DisableCollectivIO(self)

    def CreateDiskFile(self, data_dims, data_dims_size, data_type_class):
        return _ArrayUDF.Datai_CreateDiskFile(self, data_dims, data_dims_size, data_type_class)

    def GetTypeClass(self):
        return _ArrayUDF.Datai_GetTypeClass(self)

    def GetFileName(self):
        return _ArrayUDF.Datai_GetFileName(self)

    def GetGroupName(self):
        return _ArrayUDF.Datai_GetGroupName(self)

    def GetDatasetName(self):
        return _ArrayUDF.Datai_GetDatasetName(self)
Datai_swigregister = _ArrayUDF.Datai_swigregister
Datai_swigregister(Datai)
cvar = _ArrayUDF.cvar

class Dataf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dataf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Dataf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Dataf
    __del__ = lambda self: None

    def GetDimSize(self):
        return _ArrayUDF.Dataf_GetDimSize(self)

    def ReadData(self, start, end, data):
        return _ArrayUDF.Dataf_ReadData(self, start, end, data)

    def WriteData(self, start, end, data):
        return _ArrayUDF.Dataf_WriteData(self, start, end, data)

    def DisableCollectivIO(self):
        return _ArrayUDF.Dataf_DisableCollectivIO(self)

    def CreateDiskFile(self, data_dims, data_dims_size, data_type_class):
        return _ArrayUDF.Dataf_CreateDiskFile(self, data_dims, data_dims_size, data_type_class)

    def GetTypeClass(self):
        return _ArrayUDF.Dataf_GetTypeClass(self)

    def GetFileName(self):
        return _ArrayUDF.Dataf_GetFileName(self)

    def GetGroupName(self):
        return _ArrayUDF.Dataf_GetGroupName(self)

    def GetDatasetName(self):
        return _ArrayUDF.Dataf_GetDatasetName(self)
Dataf_swigregister = _ArrayUDF.Dataf_swigregister
Dataf_swigregister(Dataf)

class Datad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Datad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Datad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Datad
    __del__ = lambda self: None

    def GetDimSize(self):
        return _ArrayUDF.Datad_GetDimSize(self)

    def ReadData(self, start, end, data):
        return _ArrayUDF.Datad_ReadData(self, start, end, data)

    def WriteData(self, start, end, data):
        return _ArrayUDF.Datad_WriteData(self, start, end, data)

    def DisableCollectivIO(self):
        return _ArrayUDF.Datad_DisableCollectivIO(self)

    def CreateDiskFile(self, data_dims, data_dims_size, data_type_class):
        return _ArrayUDF.Datad_CreateDiskFile(self, data_dims, data_dims_size, data_type_class)

    def GetTypeClass(self):
        return _ArrayUDF.Datad_GetTypeClass(self)

    def GetFileName(self):
        return _ArrayUDF.Datad_GetFileName(self)

    def GetGroupName(self):
        return _ArrayUDF.Datad_GetGroupName(self)

    def GetDatasetName(self):
        return _ArrayUDF.Datad_GetDatasetName(self)
Datad_swigregister = _ArrayUDF.Datad_swigregister
Datad_swigregister(Datad)

class Stencilf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stencilf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stencilf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Stencilf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Stencilf
    __del__ = lambda self: None

    def __call__(self, *args):
        return _ArrayUDF.Stencilf___call__(self, *args)

    def get_value(self):
        return _ArrayUDF.Stencilf_get_value(self)

    def SetLocation(self, my_offset, my_coordinate):
        return _ArrayUDF.Stencilf_SetLocation(self, my_offset, my_coordinate)

    def set_trail_run_flag(self):
        return _ArrayUDF.Stencilf_set_trail_run_flag(self)

    def get_trail_run_result(self, overlap_size):
        return _ArrayUDF.Stencilf_get_trail_run_result(self, overlap_size)

    def set_my_g_location_rm(self, lrm):
        return _ArrayUDF.Stencilf_set_my_g_location_rm(self, lrm)

    def get_my_g_location_rm(self):
        return _ArrayUDF.Stencilf_get_my_g_location_rm(self)

    def get_id(self):
        return _ArrayUDF.Stencilf_get_id(self)
Stencilf_swigregister = _ArrayUDF.Stencilf_swigregister
Stencilf_swigregister(Stencilf)

class Stencild(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stencild, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stencild, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Stencild(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Stencild
    __del__ = lambda self: None

    def __call__(self, *args):
        return _ArrayUDF.Stencild___call__(self, *args)

    def get_value(self):
        return _ArrayUDF.Stencild_get_value(self)

    def SetLocation(self, my_offset, my_coordinate):
        return _ArrayUDF.Stencild_SetLocation(self, my_offset, my_coordinate)

    def set_trail_run_flag(self):
        return _ArrayUDF.Stencild_set_trail_run_flag(self)

    def get_trail_run_result(self, overlap_size):
        return _ArrayUDF.Stencild_get_trail_run_result(self, overlap_size)

    def set_my_g_location_rm(self, lrm):
        return _ArrayUDF.Stencild_set_my_g_location_rm(self, lrm)

    def get_my_g_location_rm(self):
        return _ArrayUDF.Stencild_get_my_g_location_rm(self)

    def get_id(self):
        return _ArrayUDF.Stencild_get_id(self)
Stencild_swigregister = _ArrayUDF.Stencild_swigregister
Stencild_swigregister(Stencild)

class Stencili(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stencili, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stencili, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Stencili(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Stencili
    __del__ = lambda self: None

    def __call__(self, *args):
        return _ArrayUDF.Stencili___call__(self, *args)

    def get_value(self):
        return _ArrayUDF.Stencili_get_value(self)

    def SetLocation(self, my_offset, my_coordinate):
        return _ArrayUDF.Stencili_SetLocation(self, my_offset, my_coordinate)

    def set_trail_run_flag(self):
        return _ArrayUDF.Stencili_set_trail_run_flag(self)

    def get_trail_run_result(self, overlap_size):
        return _ArrayUDF.Stencili_get_trail_run_result(self, overlap_size)

    def set_my_g_location_rm(self, lrm):
        return _ArrayUDF.Stencili_set_my_g_location_rm(self, lrm)

    def get_my_g_location_rm(self):
        return _ArrayUDF.Stencili_get_my_g_location_rm(self)

    def get_id(self):
        return _ArrayUDF.Stencili_get_id(self)
Stencili_swigregister = _ArrayUDF.Stencili_swigregister
Stencili_swigregister(Stencili)

class Arrayf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arrayf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Arrayf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Arrayf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Arrayf
    __del__ = lambda self: None

    def LoadNextChunk(self):
        return _ArrayUDF.Arrayf_LoadNextChunk(self)

    def Apply(self, UDF, B):
        return _ArrayUDF.Arrayf_Apply(self, UDF, B)

    def GetRank(self):
        return _ArrayUDF.Arrayf_GetRank(self)

    def GetDims(self):
        return _ArrayUDF.Arrayf_GetDims(self)

    def ReportTime(self):
        return _ArrayUDF.Arrayf_ReportTime(self)

    def CreateDiskFile(self, data_dims_t, data_dims_size_t, data_chunk_size_t, data_overlap_size_t, type_class_t, data_total_chunks_p_t):
        return _ArrayUDF.Arrayf_CreateDiskFile(self, data_dims_t, data_dims_size_t, data_chunk_size_t, data_overlap_size_t, type_class_t, data_total_chunks_p_t)

    def DisableCollectivIO(self, fn):
        return _ArrayUDF.Arrayf_DisableCollectivIO(self, fn)

    def SaveResult(self, current_chunk_start_offset, current_chunk_end_offset, current_result_chunk_data):
        return _ArrayUDF.Arrayf_SaveResult(self, current_chunk_start_offset, current_chunk_end_offset, current_result_chunk_data)

    def GetFileName(self):
        return _ArrayUDF.Arrayf_GetFileName(self)
Arrayf_swigregister = _ArrayUDF.Arrayf_swigregister
Arrayf_swigregister(Arrayf)

class Arrayd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arrayd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Arrayd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Arrayd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Arrayd
    __del__ = lambda self: None

    def LoadNextChunk(self):
        return _ArrayUDF.Arrayd_LoadNextChunk(self)

    def Apply(self, UDF, B):
        return _ArrayUDF.Arrayd_Apply(self, UDF, B)

    def GetRank(self):
        return _ArrayUDF.Arrayd_GetRank(self)

    def GetDims(self):
        return _ArrayUDF.Arrayd_GetDims(self)

    def ReportTime(self):
        return _ArrayUDF.Arrayd_ReportTime(self)

    def CreateDiskFile(self, data_dims_t, data_dims_size_t, data_chunk_size_t, data_overlap_size_t, type_class_t, data_total_chunks_p_t):
        return _ArrayUDF.Arrayd_CreateDiskFile(self, data_dims_t, data_dims_size_t, data_chunk_size_t, data_overlap_size_t, type_class_t, data_total_chunks_p_t)

    def DisableCollectivIO(self, fn):
        return _ArrayUDF.Arrayd_DisableCollectivIO(self, fn)

    def SaveResult(self, current_chunk_start_offset, current_chunk_end_offset, current_result_chunk_data):
        return _ArrayUDF.Arrayd_SaveResult(self, current_chunk_start_offset, current_chunk_end_offset, current_result_chunk_data)

    def GetFileName(self):
        return _ArrayUDF.Arrayd_GetFileName(self)
Arrayd_swigregister = _ArrayUDF.Arrayd_swigregister
Arrayd_swigregister(Arrayd)

class Arrayi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arrayi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Arrayi, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ArrayUDF.new_Arrayi(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ArrayUDF.delete_Arrayi
    __del__ = lambda self: None

    def LoadNextChunk(self):
        return _ArrayUDF.Arrayi_LoadNextChunk(self)

    def Apply(self, UDF, B):
        return _ArrayUDF.Arrayi_Apply(self, UDF, B)

    def GetRank(self):
        return _ArrayUDF.Arrayi_GetRank(self)

    def GetDims(self):
        return _ArrayUDF.Arrayi_GetDims(self)

    def ReportTime(self):
        return _ArrayUDF.Arrayi_ReportTime(self)

    def CreateDiskFile(self, data_dims_t, data_dims_size_t, data_chunk_size_t, data_overlap_size_t, type_class_t, data_total_chunks_p_t):
        return _ArrayUDF.Arrayi_CreateDiskFile(self, data_dims_t, data_dims_size_t, data_chunk_size_t, data_overlap_size_t, type_class_t, data_total_chunks_p_t)

    def DisableCollectivIO(self, fn):
        return _ArrayUDF.Arrayi_DisableCollectivIO(self, fn)

    def SaveResult(self, current_chunk_start_offset, current_chunk_end_offset, current_result_chunk_data):
        return _ArrayUDF.Arrayi_SaveResult(self, current_chunk_start_offset, current_chunk_end_offset, current_result_chunk_data)

    def GetFileName(self):
        return _ArrayUDF.Arrayi_GetFileName(self)
Arrayi_swigregister = _ArrayUDF.Arrayi_swigregister
Arrayi_swigregister(Arrayi)


def O1f(stencil, i1):
    return _ArrayUDF.O1f(stencil, i1)
O1f = _ArrayUDF.O1f

def O1i(stencil, i1):
    return _ArrayUDF.O1i(stencil, i1)
O1i = _ArrayUDF.O1i

def O1d(stencil, i1):
    return _ArrayUDF.O1d(stencil, i1)
O1d = _ArrayUDF.O1d

def O2f(stencil, i1, i2):
    return _ArrayUDF.O2f(stencil, i1, i2)
O2f = _ArrayUDF.O2f

def O2i(stencil, i1, i2):
    return _ArrayUDF.O2i(stencil, i1, i2)
O2i = _ArrayUDF.O2i

def O2d(stencil, i1, i2):
    return _ArrayUDF.O2d(stencil, i1, i2)
O2d = _ArrayUDF.O2d

def O3f(*args):
    return _ArrayUDF.O3f(*args)
O3f = _ArrayUDF.O3f

def O3i(*args):
    return _ArrayUDF.O3i(*args)
O3i = _ArrayUDF.O3i

def O3d(*args):
    return _ArrayUDF.O3d(*args)
O3d = _ArrayUDF.O3d

import ctypes

py_callback_typef = ctypes.CFUNCTYPE(ctypes.c_float, ctypes.c_void_p)

def PyApply(udf, A, B):
    f = py_callback_typef(udf)
    f_ptr = ctypes.cast(f, ctypes.c_void_p).value
    A.Apply(f_ptr, B)

# This file is compatible with both classic and new-style classes.


